Challenge staking architecture design and implementation

Stage 1 - Start Game Flow
Stage 1.1
 - User requests to be matched with someone to play a game
    - Client sends a request to the server
      - /api/v3/challenges/create (post, payload: [category, amount])
      - response : [ data: challengeRequestId]
    - Client shows a loading screen
    - Server looks for someone else requesting a match at that moment for the same amount and category
      x - Client can maintain a persistent connection (websocket) with the server while waiting for a match
      - Client can send a request, disconnects and wait for an update later via push notification
      - Client can send a request, disconnects and wait for an update later via firestore subscription
         - Server creates a document in firestore with the requests data
         - Server returns the documentId to the client
         - Client subscribes to the documentId on firebase for realtime updates
        
         - Server finds matching request in the same category and amount in the background (every 30 secs)
         - If found, server updates the both  documentId in firebase with the new data (questions and opponent info, start command)
      x - Client can send a request, disconnects and keep polling the server every x seconds to know if a match was found
    - If found, server sends a message to both clients to start the game
    - If not found, server sends a message to the user to start game with a bot

Backend table structure
- realtime challenge requests
  id
  challenge_request_id
  userId
  userName
  amount
  category
  status -- matching

- challenge information
  id
  first_user_id
  second_user_id
  first_user_challenge_request_id
  second_user_challenge_request_id
  amount
  category
  status -- matched, ongoing , completed
  startTime
  endTime

- challenge_session_questions
  id
  challenge_id
  question_id
  status (correct, incorrect)
